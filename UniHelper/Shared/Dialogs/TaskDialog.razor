@using UniHelper.Shared.Enums

<MudDialog>
    <DialogContent>
        <EditForm EditContext="TaskContext">
            <DataAnnotationsValidator></DataAnnotationsValidator>
            <div>
                <MudRadioGroup T="TaskType" SelectedOption="AddType" SelectedOptionChanged="@((e) => TypeChanged(e, true))">
                    @foreach (var type in Enum.GetValues(typeof(TaskType)).Cast<TaskType>())
                    {
                        <MudRadio Option="@type" Color="Color.Primary" Disabled="IsEdit" >@type</MudRadio>
                    }
                </MudRadioGroup>
            </div>
            @if (AddType == TaskType.Period)
            {
                <div>
                    <MudSelect @bind-Value="SelectedId" Label="Period" FullWidth="true" Dense="true">
                        @if (Periods != null)
                        {
                            @foreach (var period in Periods)
                            {
                                <MudSelectItem Value="period.Id">@period.Name</MudSelectItem>
                            }
                        }
                    </MudSelect>
                </div>
            }
            else if (AddType == TaskType.Subject)
            {
                @if (!IsEdit)
                {
                    <div>
                        <MudSelect T="int" Value="ParentSelectedId" ValueChanged="ParentIdChanged" Label="Period" FullWidth="true" Dense="true">
                            @if (Periods != null)
                            {
                                @foreach (var period in Periods)
                                {
                                    <MudSelectItem Value="period.Id">@period.Name</MudSelectItem>
                                }
                            }
                        </MudSelect>
                    </div>
                }
                <div>
                    <MudSelect @bind-Value="SelectedId" Label="Subject" FullWidth="true" Dense="true">
                        @if (Subjects != null)
                        {
                            @foreach (var subject in Subjects)
                            {
                                <MudSelectItem Value="subject.Id">@subject.ShortName</MudSelectItem>
                            }
                        }
                    </MudSelect>
                </div>
            }
            <div>
                <MudTextField @bind-Value="Model.Text" Label="Task" FullWidth="true"/>
                <ValidationMessage For="() => Model.Text"></ValidationMessage>
            </div>
            <div>
                <MudDatePicker @bind-Date="Model.DueDate" Label="Due Date" Class="w-100"/>
                <ValidationMessage For="() => Model.DueDate"></ValidationMessage>
            </div>
            <div>
                <MudSelect @bind-Value="Model.Priority" Label="Priority" FullWidth="true" Dense="true">
                    @foreach (var priority in Enum.GetValues(typeof(TaskPriority)).Cast<TaskPriority>().ToArray())
                    {
                        <MudSelectItem Value="priority"/>
                    }
                </MudSelect>
                <ValidationMessage For="() => Model.Priority"></ValidationMessage>
            </div>
            <div>
                <MudSwitch @bind-Checked="Model.IsSolved" Label="Is Solved" Color="Color.Primary"/>
                <ValidationMessage For="() => Model.IsSolved"></ValidationMessage>
            </div>
        </EditForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Save">Save</MudButton>
    </DialogActions>
</MudDialog>